---
title: "Seed viability"
format: html
editor: visual
---

```{r}
library(brms)
library(loo)
```





```{r}
priors <- c(
  prior(normal(1, 1), nlpar = "upper"),
  prior(normal(0.1, 0.1), nlpar = "slope"),
  prior(normal(12, 5), nlpar = "t50")
)
```

```{r}
full_model <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * depth_cm * location * run,
  nl = TRUE
)
```

```{r}
full_m <- brm(
  formula = full_model,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```


```{r}
simple_model <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species + depth_cm + location + run,
  nl = TRUE
)
```


```{r}
simple_m  <- brm(
  formula = simple_model,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```

```{r}
loo_full <- add_criterion(full_m, "loo", moment_match = TRUE)
loo_simple <- add_criterion(simple_m, "loo", moment_match = TRUE)

loo_compare(loo_full, loo_simple)
```



```{r}
red_model1 <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * depth_cm * location,
  nl = TRUE
)
```


```{r}
red_m1  <- brm(
  formula = red_model1,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```

```{r}
loo_red1 <- add_criterion(red_m1, "loo", moment_match = TRUE)

loo_compare(loo_full, loo_red1)
```

```{r}
red_model2 <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * depth_cm * run,
  nl = TRUE
)
```


```{r}
red_m2  <- brm(
  formula = red_model2,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```

```{r}
loo_red2 <- add_criterion(red_m2, "loo", moment_match = TRUE)

loo_compare(loo_full, loo_red2)
```


```{r}
red_model3 <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * location * run,
  nl = TRUE
)
```


```{r}
red_m3  <- brm(
  formula = red_model3,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```


```{r}
loo_red3 <- add_criterion(red_m3, "loo", moment_match = TRUE)

loo_compare(loo_full, loo_red3)
```


```{r}
red_model4 <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ depth_cm * location * run,
  nl = TRUE
)
```


```{r}
red_m4  <- brm(
  formula = red_model4,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```


```{r}
loo_red4 <- add_criterion(red_m4, "loo", moment_match = TRUE)

loo_compare(loo_full, loo_red4)
```









```{r}
summary(loo_full)
```


```{r}
plot(loo_full)
```


```{r}
#| warning: false
conditional_effects(full_m)

```



```{r}
new_data <- expand.grid(
  retrieval_time_months = seq(0, 60, by = 1),
  species = c("Palmer amaranth", "waterhemp"),
  depth_cm = c("5", "25"),
  location = unique(all_data$location),
  run = unique(all_data$run)
)
new_data <- subset(new_data, !(run == 2 & retrieval_time_months > 36))


preds <- fitted(full_m, newdata = new_data,  probs = c(0.025, 0.975))
new_data$predicted <- preds[, "Estimate"]
new_data$lower_CI <- preds[, "Q2.5"]
new_data$upper_CI <- preds[, "Q97.5"]
```

```{r}
summary(full_m)$random$run
```


```{r}
ggplot(new_data, aes(x = retrieval_time_months, y = predicted*100)) +
  geom_line(aes(color = depth_cm)) +
  geom_jitter(data=all_data, aes(y = viability_prop*100, color = depth_cm), alpha = 0.1) +
  geom_ribbon(aes(ymin = lower_CI*100, ymax = upper_CI*100, fill = depth_cm), alpha = 0.2) +
  facet_grid(run~location~species) +
  labs(
    x = "Months Since Burial",
    y = "Seed viability (%)"
  ) +
  theme_foundation() +
  scale_y_continuous(limits = c(0, 120)) +
  scale_color_brewer(palette = "Set1") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(fill = "lightgray")
  )

ggsave("bayesian_reg.png", width=7, height=10)

```




```{r}
# Extract posterior draws as a data frame
post <- as_draws_df(full_m)
names(post)
```

```{r}
groups <- expand.grid(
  species = c("Palmer amaranth", "waterhemp"),
  depth_cm = c("5", "25"),
  location = unique(all_data$location),
  run = unique(all_data$run),
  stringsAsFactors = FALSE
)
```


```{r}
safe_col <- function(post, colname) {
  if (colname %in% colnames(post)) {
    return(post[[colname]])
  } else {
    return(rep(0, nrow(post)))  # return a zero vector of correct length
  }
}
```


```{r}
get_param <- function(post, group, param) {
  base <- paste0("b_", param, "_Intercept")
  terms <- c(base)
  
  # Main effects
  if (group$species == "waterhemp") terms <- c(terms, paste0("b_", param, "_specieswaterhemp"))
  if (group$depth_cm == "25") terms <- c(terms, paste0("b_", param, "_depth_cm25"))
  terms <- c(terms, paste0("b_", param, "_location", group$location))
  if (group$run == 2) terms <- c(terms, paste0("b_", param, "_run2"))
  
  # Interactions
  if (group$species == "waterhemp" && group$depth_cm == "25") {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:depth_cm25"))
  }
  if (group$species == "waterhemp") {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:location", group$location))
  }
  if (group$species == "waterhemp" && group$run == 2) {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:run2"))
  }
  if (group$depth_cm == "25") {
    terms <- c(terms, paste0("b_", param, "_depth_cm25:location", group$location))
  }
  if (group$depth_cm == "25" && group$run == 2) {
    terms <- c(terms, paste0("b_", param, "_depth_cm25:run2"))
  }
  terms <- c(terms, paste0("b_", param, "_location", group$location, ":run2"))
  if (group$species == "waterhemp" && group$depth_cm == "25") {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:depth_cm25:location", group$location))
  }
  if (group$species == "waterhemp" && group$depth_cm == "25" && group$run == 2) {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:depth_cm25:run2"))
  }
  if (group$species == "waterhemp") {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:location", group$location, ":run2"))
  }
  if (group$depth_cm == "25") {
    terms <- c(terms, paste0("b_", param, "_depth_cm25:location", group$location, ":run2"))
  }
  if (group$species == "waterhemp" && group$depth_cm == "25") {
    terms <- c(terms, paste0("b_", param, "_specieswaterhemp:depth_cm25:location", group$location, ":run2"))
  }

  # Sum safely
  Reduce(`+`, lapply(terms, function(term) safe_col(post, term)))
}

```


```{r}
calc_ED <- function(p, t50, slope) {
  # Only use draws with negative slope
  valid <- slope < 0
  t50 <- t50[valid]
  slope <- slope[valid]
  
  ed <- t50 + (1 / slope) * log((1 / p) - 1)
  return(ed)
}



results <- lapply(1:nrow(groups), function(i) {
  g <- groups[i, ]
  t50 <- get_param(post, g, "t50")
  slope <- get_param(post, g, "slope")
  ed90 <- calc_ED(0.9, t50, slope)
  
  data.frame(
    species = g$species,
    depth_cm = g$depth_cm,
    location = g$location,
    run = g$run,
    ED90_mean = mean(ed90),
    ED90_lower = quantile(ed90, 0.025),
    ED90_upper = quantile(ed90, 0.975)
  )
})

ED90_table <- do.call(rbind, results)
```


```{r}
calc_ED_absolute <- function(y_target, t50, slope, upper) {
  valid <- slope != 0 & upper > y_target & y_target > 0
  t50 <- t50[valid]
  slope <- slope[valid]
  upper <- upper[valid]
  
  ed <- t50 - (1 / slope) * log((upper / y_target) - 1)
  ed[!is.finite(ed)] <- NA
  return(ed)
}
```


```{r}
results <- lapply(seq_len(nrow(groups)), function(i) {
  group <- groups[i, , drop = TRUE]  # ensures group is a named list
  
  # Extract parameters for this group
  t50 <- get_param(post, group, "t50")
  slope <- get_param(post, group, "slope")
  upper <- get_param(post, group, "upper")
  
  # Calculate EDx values for absolute viability thresholds
  ed90 <- calc_ED_absolute(0.9, t50, slope, upper)
  ed50 <- calc_ED_absolute(0.5, t50, slope, upper)
  ed10 <- calc_ED_absolute(0.1, t50, slope, upper)
  ed1 <- calc_ED_absolute(0.01, t50, slope, upper)

# Return summary for this group
  data.frame(
    species = group$species,
    depth_cm = group$depth_cm,
    location = group$location,
    run = group$run,
    ED90_mean = mean(ed90),
    ED90_lower = quantile(ed90, 0.025),
    ED90_upper = quantile(ed90, 0.975),
    ED50_mean = mean(ed50),
    ED50_lower = quantile(ed50, 0.025),
    ED50_upper = quantile(ed50, 0.975),
    ED10_mean = mean(ed10),
    ED10_lower = quantile(ed10, 0.025),
    ED10_upper = quantile(ed10, 0.975),
    ED1_mean = mean(ed1),
    ED1_lower = quantile(ed1, 0.025),
    ED1_upper = quantile(ed1, 0.975)
  )
})

# Combine all results into one table
(ED_table <- do.call(rbind, results))
```

```{r}
library(ggplot2)

ggplot(ED_table, aes(x = depth_cm, y = ED50_mean, color = species)) +
  geom_point(position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = ED50_lower, ymax = ED50_upper), width = 0.2, position = position_dodge(width = 0.5)) +
  facet_grid(location ~ run) +
  labs(title = "ED50 across treatments", y = "Months", x = "Burial depth")
```


```{r}
group1 <- groups[1, , drop = TRUE]
group2 <- groups[2, , drop = TRUE]

t50_1 <- get_param(post, group1, "t50")
slope_1 <- get_param(post, group1, "slope")
upper_1 <- get_param(post, group1, "upper")
ed50_1 <- calc_ED_absolute(0.5, t50_1, slope_1, upper_1)

t50_2 <- get_param(post, group2, "t50")
slope_2 <- get_param(post, group2, "slope")
upper_2 <- get_param(post, group2, "upper")
ed50_2 <- calc_ED_absolute(0.5, t50_2, slope_2, upper_2)

```


```{r}
ed50_diff <- ed50_1 - ed50_2
```


```{r}
mean_diff <- mean(ed50_diff, na.rm = TRUE)
ci_diff <- quantile(ed50_diff, c(0.025, 0.975), na.rm = TRUE)
prob_positive <- mean(ed50_diff > 0, na.rm = TRUE)
```


```{r}
df <- data.frame(
  ed50 = c(ed50_1, ed50_2),
  group = rep(c("Group 1", "Group 2"), each = length(ed50_1))
)

ggplot(df, aes(x = ed50, fill = group)) +
  geom_density(alpha = 0.5) +
  labs(title = "Posterior distribution of ED50", x = "ED50 (months)")
```







