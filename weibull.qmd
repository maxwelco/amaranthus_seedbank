---
title: "weibull"
format: html
editor: visual
---


```{r}
library(brms)
library(tidybayes)
library(bayesplot)
library(loo)
library(reshape2)
```

```{r}
set.seed(2912) # Use the same number for all models
```



```{r}
priors <- c(
  prior(normal(1, 1), nlpar = "upper"),
  prior(normal(0.1, 0.1), nlpar = "slope"),
  prior(normal(12, 5), nlpar = "t50")
)
```

```{r}
full_model_f <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * depth_cm * location,
  nl = TRUE
)
```

```{r}
full_m_f <- brm(
  formula = full_model_f,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  seed = 2912,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```


```{r}
simple_model_f <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species + depth_cm + location,
  nl = TRUE
)
```


```{r}
simple_m_f  <- brm(
  formula = simple_model_f,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  seed = 2912,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```



```{r}
loo_full_f <- add_criterion(full_m_f, "loo", moment_match = TRUE)
loo_simple_f <- add_criterion(simple_m_f, "loo", moment_match = TRUE)

loo_compare(loo_full_f, loo_simple_f)
```



```{r}
red_model1_f <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * depth_cm,
  nl = TRUE
)
```


```{r}
red_m1_f  <- brm(
  formula = red_model1_f,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  seed = 2912,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```

```{r}
loo_red1_f <- add_criterion(red_m1_f, "loo", moment_match = TRUE)

loo_compare(loo_full_f, loo_red1_f)
```


```{r}
red_model2_f <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ species * location,
  nl = TRUE
)
```


```{r}
red_m2_f  <- brm(
  formula = red_model2_f,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  seed = 2912,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```

```{r}
loo_red2_f <- add_criterion(red_m2_f, "loo", moment_match = TRUE)

loo_compare(loo_full_f, loo_red2_f)
```








```{r}
red_model3_f <- bf(
  viability_prop ~ upper / (1 + exp(-slope * (retrieval_time_months - t50))),
  upper + slope + t50 ~ location,
  nl = TRUE
)
```


```{r}
red_m3_f  <- brm(
  formula = red_model3_f,
  data = all_data,
  prior = priors,
  chains = 4,
  cores = 4,
  seed = 2912,
  control = list(adapt_delta = 0.95),
  backend = "rstan"
)
```


```{r}
loo_red3_f <- add_criterion(red_m3_f, "loo", moment_match = TRUE)

loo_compare(loo_red2_f, loo_red3_f)
```




```{r}
new_data <- expand.grid(
  retrieval_time_months = seq(0, 60, by = 1),
  species = unique(all_data$species),
#  depth_cm = unique(all_data$depth_cm),
  location = unique(all_data$location))

preds <- fitted(red_m2_f, newdata = new_data, probs = c(0.025, 0.975))
new_data$predicted <- preds[, "Estimate"]
new_data$lower_CI <- preds[, "Q2.5"]
new_data$upper_CI <- preds[, "Q97.5"]
```



```{r}
new_data %>% 
  mutate(location = factor(location, levels = c("College Station", "Corpus Christi", "Lubbock"))) %>%
  ggplot(aes(
  x = retrieval_time_months,
  y = predicted * 100,
  group = depth_cm,  # group aesthetics
  shape = depth_cm,
  color = depth_cm,
  linetype = depth_cm,
  fill = depth_cm
)) +
  geom_line(size = 1.2) +
  geom_jitter(
    data = all_data,
    aes(y = viability_prop * 100),
    alpha = 0.1,
    size = 4
  ) +
  geom_ribbon(aes(
    ymin = lower_CI * 100,
    ymax = upper_CI * 100
  ), color = NA, alpha = 0.1) +
  facet_grid(location ~ species) +
  labs(x = "Month after burial", y = "Viable seeds (%)") +
  scale_shape_manual(values = c(16, 18)) +
  scale_y_continuous(limits = c(0, 110), breaks = seq(0, 100, 25)) +
  scale_x_continuous(limits = c(0, 60), breaks = seq(0, 60, 12)) +
  scale_color_fivethirtyeight(name = "Seed depth (cm)") +
  scale_fill_fivethirtyeight(name = "Seed depth (cm)") +
  scale_linetype_manual(values = c("solid", "dashed"), name = "Depth (cm)") +
  guides(
    color = guide_legend(
      title = "Seed depth (cm)",
      override.aes = list(
        linetype = c("solid", "dashed"),
        shape = c(16, 18)
      )
    ),
    fill = "none",       # hide separate fill legend
    shape = "none",      # hide separate shape legend
    linetype = "none"    # hide separate linetype legend
  ) +
  theme_foundation() +
  theme(
    legend.background = element_blank(),
    legend.box = element_blank(),
    legend.key = element_blank(),
    axis.title = element_markdown(size = 13),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),
    legend.position = "top"
  ) -> seed_viability_plot


ggsave("figures/seed_viability.png", width=7, height=10)
```


```{r}
new_data %>% 
  mutate(location = factor(location, levels = c("College Station", "Corpus Christi", "Lubbock"))) %>%
  mutate(group = paste0(species, " - ", location)) %>%
  mutate(group = factor(group, levels = unique(group)))  %>% 
  ggplot(aes(
  x = retrieval_time_months,
  y = predicted * 100,
  group = group,  # group aesthetics
  shape = group,
  color = group,
#  linetype = group,
  fill = group
)) +
  geom_line(size = 1.2) +
  geom_jitter(
    data = all_data %>% mutate(group = paste0(species, " - ", location)),
    aes(y = viability_prop * 100),
    alpha = 0.1,
    size = 3
  ) +
  labs(x = "Month after burial", y = "Viable seeds (%)") +
  geom_ribbon(aes(
    ymin = lower_CI * 100,
    ymax = upper_CI * 100, group = group
  ), color = NA, alpha = 0.1) +
  labs(x = "Month after burial", y = "Viable seeds (%)") +
  scale_y_continuous(limits = c(0, 107), breaks = seq(0, 100, 25)) +
  scale_x_continuous(limits = c(0, 60), breaks = seq(0, 60, 12)) +
  scale_shape_manual(values = rep(c(16, 17, 18, 15, 8, 3), 6)) +
  scale_color_colorblind() + 
  scale_fill_colorblind() + 
#  scale_color_manual(values = RColorBrewer::brewer.pal(6, "Paired")) +
#  scale_fill_manual(values = RColorBrewer::brewer.pal(6, "Paired")) +
  theme_foundation() +
  theme(
    legend.background = element_blank(),
    legend.title = element_blank(),
    legend.box = element_blank(),
    legend.key = element_blank(),
    axis.title = element_blank(),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),
    legend.position = c(0.75, 0.85)
  ) 


ggsave("figures/seed_viability_2.png", width=6, height=6)
```



```{r}
# Extract all posterior draws
posterior_draws <- as_draws_df(red_m2_f)
```


```{r}


```



```{r}
get_param_for_group <- function(draws_df, param, species, location) {
  # Base intercept
  base <- draws_df[[paste0("b_", param, "_Intercept")]]
  
  # Initialize list of terms to add
  term_list <- c()
  
  # Species main effect
  if (species == "waterhemp") {
    term_list <- c(term_list, paste0("b_", param, "_specieswaterhemp"))
  }
  
  # Location main effect
  if (location == "Lubbock") {
    term_list <- c(term_list, paste0("b_", param, "_locationLubbock"))
  } else if (location == "College Station") {
    term_list <- c(term_list, paste0("b_", param, "_locationCollegeStation"))
  }
  
  # Species Ã— Location interactions
  if (species == "waterhemp" & location == "Lubbock") {
    term_list <- c(term_list, paste0("b_", param, "_specieswaterhemp:locationLubbock"))
  }
  if (species == "waterhemp" & location == "College Station") {
    term_list <- c(term_list, paste0("b_", param, "_specieswaterhemp:locationCollegeStation"))
  }
  
  # Sum all included terms safely
  param_value <- base
  for (term in term_list) {
    if (term %in% names(draws_df)) {
      param_value <- param_value + draws_df[[term]]
    }
  }
  
  return(param_value)
}
```


```{r}
# Assuming your dataset is called all_data
group_levels <- all_data %>%
  dplyr::select(species, location) %>%
  distinct() %>%
  arrange(species, location) %>%
  as.list()  # convert to a list of columns for pmap

```


```{r}
ed_draws_long <- pmap_dfr(group_levels, function(species, location) {
  # Get posterior draws for each parameter
  upper <- get_param_for_group(posterior_draws, "upper", species, location)
  slope <- get_param_for_group(posterior_draws, "slope", species, location)
  t50   <- get_param_for_group(posterior_draws, "t50",   species, location)

  # Calculate ET draws for all targets (matrix: draws x targets)
  ET_mat <- sapply(Y_targets, function(Y_target) {
    t50 - (1 / slope) * log((upper / Y_target) - 1)
  })

  # Convert to tibble with draws in long format
  map_dfr(seq_along(Y_targets), function(i) {
    tibble(
      species = species,
      location = location,
      ET_target = names(Y_targets)[i],
      draw = seq_along(upper),   # number of posterior draws
      ET_value = ET_mat[, i]
    )
  })
})
```



```{r}
# Define ET targets (previously ED targets)
Y_targets <- c(ET1 = 0.01, ET20 = 0.20, ET50 = 0.5, ET80 = 0.8)

# Unique group combinations for reduced model
group_levels <- all_data %>%
  distinct(species, location)

# Calculate ET draws and summaries for all groups and targets
et_by_group_all <- pmap_dfr(group_levels, function(species, location) {
  # Get posterior draws for this species-location combination
  upper <- get_param_for_group(posterior_draws, "upper", species, location)
  slope <- get_param_for_group(posterior_draws, "slope", species, location)
  t50   <- get_param_for_group(posterior_draws, "t50",   species, location)
  
  # Calculate ET for each target (matrix of draws: rows = posterior draws, cols = ET targets)
  ET_mat <- sapply(Y_targets, function(Y_target) {
    t50 - (1 / slope) * log((upper / Y_target) - 1)
  })
  
  # Build tibble with median and 95% credible intervals for each ET target
  map_dfr(seq_along(Y_targets), function(i) {
    tibble(
      species = species,
      location = location,
      ET_target = names(Y_targets)[i],
      median_ET = median(ET_mat[, i]),
      lower_CI = quantile(ET_mat[, i], 0.025),
      upper_CI = quantile(ET_mat[, i], 0.975)
    )
  })
})
```





```{r}
# Choose groups to compare
group_a <- list(species = "Palmer amaranth", location = "Lubbock")
group_b <- list(species = "Palmer amaranth", location = "College Station")

# Choose which ET target to compare (can be "ET1", "ET20", "ET50", "ET80")
ET_to_compare <- "ET50"
```



```{r}
get_ET_draws <- function(group, Y_target) {
  upper <- get_param_for_group(posterior_draws, "upper", group$species, group$location)
  slope <- get_param_for_group(posterior_draws, "slope", group$species, group$location)
  t50   <- get_param_for_group(posterior_draws, "t50",   group$species, group$location)
  t50 - (1 / slope) * log((upper / Y_target) - 1)
}

# Get draws for both groups
ET_a <- get_ET_draws(group_a, Y_targets[ET_to_compare])
ET_b <- get_ET_draws(group_b, Y_targets[ET_to_compare])

# Compute difference and stats
diff <- ET_a - ET_b
mean_diff <- mean(diff)
ci_diff <- quantile(diff, c(0.025, 0.975))
prob_a_gt_b <- mean(diff > 0)

# Report results
cat(sprintf("Comparison at %s:\n%s vs %s\n", 
            ET_to_compare,
            paste(unlist(group_a), collapse = "_"), 
            paste(unlist(group_b), collapse = "_")))
cat(sprintf("Mean difference: %.2f\n", mean_diff))
cat(sprintf("95%% credible interval: [%.2f, %.2f]\n", ci_diff[1], ci_diff[2]))
cat(sprintf("Pr(%s > %s): %.1f%%\n", 
            paste(unlist(group_a), collapse = "_"),
            paste(unlist(group_b), collapse = "_"),
            100 * prob_a_gt_b))

```





```{r}
ed_draws_long %>% 
  filter(ET_target == "ED50") %>%
  mutate(group = paste0(species, " - ", location)) %>% 
  mutate(group = factor(group, levels = unique(group))) -> ed_draws_long1

ed_draws_long1 %>% 
  ggplot(aes(x = reorder(group, ET_value, FUN = median), y = ET_value, fill=group)) +  # note y=ED_value numeric
  geom_violin(alpha = 0.6) +
  geom_boxplot(width = 0.1, outlier.shape = NA) +
  coord_flip() +
  labs(
    title = NULL,
    x = NULL,
    y = "Months after burial for 50% seed viability (ED50)"
  ) +
  theme_foundation() +
  scale_color_manual(values = RColorBrewer::brewer.pal(12, "Paired")) +
  scale_fill_manual(values = RColorBrewer::brewer.pal(12, "Paired")) +
  scale_y_continuous(limits = c(0, 12), breaks = seq(0, 12, 3)) +
  theme(
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    legend.position = "none"
  )

ggsave("figures/ed50_violin_plot.png", width = 8, height = 5)
```


```{r}
# Add group label
ed50_wide <- ed_draws_long %>%
  filter(ET_target == "ED50") %>%
  mutate(group = paste0(species, " - ", location)) %>%
  dplyr::select(group, ET_value)  # If you have posterior draws, use those instead of median_E
```


```{r}
# Nest by group and pivot to wide format
ed50_matrix <- ed50_wide %>%
  group_by(group) %>%
  summarise(draws = list(ET_value), .groups = "drop") %>%
  pivot_wider(names_from = group, values_from = draws) %>%
  unnest(cols = everything()) %>%
  as.data.frame()
```

```{r}
group_ids <- colnames(ed50_matrix)

pairwise_probs <- matrix(NA, nrow = length(group_ids), ncol = length(group_ids),
                         dimnames = list(group_ids, group_ids))

for (i in seq_along(group_ids)) {
  for (j in seq_along(group_ids)) {
    if (i != j) {
      diff <- ed50_matrix[[i]] - ed50_matrix[[j]]
      pairwise_probs[i, j] <- mean(diff > 0)
    } else {
      pairwise_probs[i, j] <- NA
    }
  }
}
```


```{r}
heatmap_data <- melt(pairwise_probs, varnames = c("Group1", "Group2"), value.name = "Pr_G1_gt_G2")
```


```{r}
heatmap_data %>% 
  ggplot(aes(x = Group2, y = Group1)) +
  geom_point(
    aes(color = Pr_G1_gt_G2, size = Pr_G1_gt_G2),
    shape = 16
  ) +
#  geom_text(
#    aes(label = sprintf("%.2f", Pr_G1_gt_G2)),
#    size = 3.5,
#    vjust = -0.8
 # ) +
  scale_color_gradient2(
    low = "#d73027", mid = "white", high = "#1a9850",
    midpoint = 0.5, limits = c(0, 1)
  ) +
  scale_size_continuous(
    range = c(5, 9), limits = c(0, 1)
  ) +
  guides(
    color = guide_legend(title = "Pr(G1 > G2)"),
    size = guide_legend(title = "Pr(G1 > G2)")
  ) +
  theme_foundation() +
  theme(
    axis.text.x = element_text(angle = 30, hjust = 1),
    axis.text = element_text(size = 10)
  ) +
  labs(
    title = "",
    x = "Group Compared Against",
    y = "Group Being Evaluated"
  )




ggsave("figures/ed50_pairwise_heatmap.png", width = 10, height = 8)
```




```{r}
decay_draws <- add_epred_draws(full_m_f, newdata = new_data, re_formula = NA) %>%
  mutate(group = paste(species, depth_cm, "cm -", location))
```


```{r}
decay_summary <- decay_draws %>%
  mutate(group = paste(species, depth_cm, "cm -", location))


ggplot(decay_summary, aes(x = retrieval_time_months, y = predicted, color = group)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI, fill = group), alpha = 0.2, color = NA) +
  labs(
    title = "Predicted Seed Viability Over Time",
    x = "Months After Burial",
    y = "Predicted Viability",
    color = "Group",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```
































